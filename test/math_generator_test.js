// Generated by CoffeeScript 1.10.0
(function() {
  var MathGenerator, assert, sinon;

  assert = require("assert");

  sinon = require("sinon");

  MathGenerator = require("./../class/math_generator.js");

  describe("MathGenerator", function() {
    afterEach(function() {
      var base;
      return typeof (base = MathGenerator.prototype.generate).reset === "function" ? base.reset() : void 0;
    });
    it("calls generate on construction", function() {
      var gen;
      MathGenerator.prototype.generate = sinon.spy();
      gen = new MathGenerator();
      return assert(gen.generate.called);
    });
    return it("creates a generator through the static generate method", function() {
      var gen;
      MathGenerator.prototype.generate = sinon.spy();
      gen = MathGenerator.generate("whatevz", {}, true);
      return assert(gen.generate.called);
    });
  });

  describe("MathGenerator's", function() {
    it("generates addition_basic", function() {
      var questions;
      questions = MathGenerator.generate("addition_basic");
      assert(questions.length > 0);
      return assert(questions[0].question.indexOf("+") > -1);
    });
    it("generates addition_intermediate", function() {
      var questions;
      questions = MathGenerator.generate("addition_intermediate");
      assert(questions.length > 0);
      return assert(questions[0].question.indexOf("+") > -1);
    });
    it("generates subtraction_basic", function() {
      var questions;
      questions = MathGenerator.generate("subtraction_basic");
      assert(questions.length > 0);
      return assert(questions[0].question.indexOf("-") > -1);
    });
    it("generates multiplication", function() {
      var questions;
      questions = MathGenerator.generate("multiplication");
      assert(questions.length > 0);
      return assert(questions[0].question.indexOf("x") > -1);
    });
    it("generates addition_long", function() {
      var questions;
      questions = MathGenerator.generate("addition_long");
      assert(questions.length > 0);
      return assert(questions[0].question.match(/\+/g).length > 1);
    });
    it("generates addition_variable", function() {
      var questions;
      questions = MathGenerator.generate("addition_variable");
      assert(questions.length > 0);
      assert(questions[0].question.indexOf("+") > -1);
      return assert(questions[0].question.match(questions[0].question.variable));
    });
    it("generates multiplication_variable", function() {
      var questions;
      questions = MathGenerator.generate("multiplication_variable");
      assert(questions.length > 0);
      return assert(questions[0].question.match(questions[0].question.variable));
    });
    return it("generates multiplication_doubles", function() {
      var questions;
      questions = MathGenerator.generate("multiplication_doubles");
      assert(questions.length > 0);
      return assert(questions[0].question.indexOf("x") > -1);
    });
  });

}).call(this);
